#!/usr/bin/env tclsh
package require json
package require textutil::expander

if {$argc < 2} {
  puts "A simple Tcl based macro"
  puts "gmcr <Args JSON file> <Input file>"
  puts "gmcr - <Input file> # Read from stdin"
  exit
}

set args [lindex $argv 0]

if [expr {$args eq {-}}] {
  set args {}
  while {[gets stdin line] > 0} {
    append args $line
  }
} else {
  set fd [open $args r]
  set args [read $fd]
  close $fd
}
set args [::json::json2dict $args]

textutil::expander _exp
_exp setbrackets "#{{" "}}#"

_exp cpush expand
_exp cset _args $args
_exp cpop expand

proc evalfunc {in} {
  set _args [_exp cget _args]
  proc _def {name value} {_exp cset "$name" "$value"}
  proc _undef {name} {_exp cset "$name" {}}
  proc _getdef {name} {_exp cget "$name"}
  proc _print {data} {_exp cappend "$data"}
  proc _println {data} {_print "$data"; _print "\n" }

  foreach arg [dict keys $_args] {
    set argval [dict get $_args $arg]
    append _out "set $arg {$argval}\n"
  }

  append _out $in

  if {[info exists arg]} {unset arg; unset argval}
  unset in

  return [eval $_out]
}

_exp evalcmd evalfunc

set input [lindex $argv 1]
set fd [open $input r]
set input [read $fd]
close $fd

puts [_exp expand $input]
